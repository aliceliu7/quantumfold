{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from joblib import Parallel, delayed\n",
    "from sympy import *\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from datetime import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import animation\n",
    "import base64\n",
    "from IPython.display import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#         Cys-C, Met-M, Phe-F, Ile-I, Leu-L, Val-V, Trp-W, Tyr-Y, Ala-A, Gly-G, Thr-T, Ser-S, Asn-N, Gln-Q, Asp-D, Glu-E, His-H, Arg-R, Lys-K, Pro-P\n",
    "imat = [[ -5.44, -4.99, -5.80, -5.50, -5.83, -4.96, -4.95, -4.16, -3.57, -3.16, -3.11, -2.86, -2.59, -2.85, -2.41, -2.27, -3.60, -2.57, -1.95, -3.07], # Cys-C\n",
    "        [ -4.99, -5.46, -6.56, -6.02, -6.41, -5.32, -5.55, -4.91, -3.94, -3.39, -3.51, -3.03, -2.95, -3.30, -2.57, -2.89, -3.98, -3.12, -2.48, -3.45], # Met-M\n",
    "        [ -5.80, -6.56, -7.26, -6.84, -7.28, -6.29, -6.16, -5.66, -4.81, -4.13, -4.28, -4.02, -3.75, -4.10, -3.48, -3.56, -4.77, -3.98, -3.36, -4.25], # Phe-F\n",
    "        [ -5.50, -6.02, -6.84, -6.54, -7.04, -6.05, -5.78, -5.25, -4.58, -3.78, -4.03, -3.52, -3.24, -3.67, -3.17, -3.27, -4.14, -3.63, -3.01, -3.76], # Ile-I\n",
    "        [ -5.83, -6.41, -7.28, -7.04, -7.37, -6.48, -6.14, -5.67, -4.91, -4.16, -4.34, -3.92, -3.74, -4.04, -3.40, -3.59, -4.54, -4.03, -3.37, -4.20], # Leu-L\n",
    "        [ -4.96, -5.32, -6.29, -6.05, -6.48, -5.52, -5.18, -4.62, -4.04, -3.38, -3.46, -3.05, -2.83, -3.07, -2.48, -2.67, -3.58, -3.07, -2.49, -3.32], # Val-V\n",
    "        [ -4.95, -5.55, -6.16, -5.78, -6.14, -5.18, -5.06, -4.66, -3.82, -3.42, -3.22, -2.99, -3.07, -3.11, -2.84, -2.99, -3.98, -3.41, -2.69, -3.73], # Trp-W\n",
    "        [ -4.16, -4.91, -5.66, -5.25, -5.67, -4.62, -4.66, -4.17, -3.36, -3.01, -3.01, -2.78, -2.76, -2.97, -2.76, -2.79, -3.52, -3.16, -2.60, -3.19], # Tyr-Y\n",
    "        [ -3.57, -3.94, -4.81, -4.58, -4.91, -4.04, -3.82, -3.36, -2.72, -2.31, -2.32, -2.01, -1.84, -1.89, -1.70, -1.51, -2.41, -1.83, -1.31, -2.03], # Ala-A\n",
    "        [ -3.16, -3.39, -4.13, -3.78, -4.16, -3.38, -3.42, -3.01, -2.31, -2.24, -2.08, -1.82, -1.74, -1.66, -1.59, -1.22, -2.15, -1.72, -1.15, -1.87], # Gly-G\n",
    "        [ -3.11, -3.51, -4.28, -4.03, -4.34, -3.46, -3.22, -3.01, -2.32, -2.08, -2.12, -1.96, -1.88, -1.90, -1.80, -1.74, -2.42, -1.90, -1.31, -1.90], # Thr-T\n",
    "        [ -2.86, -3.03, -4.02, -3.52, -3.92, -3.05, -2.99, -2.78, -2.01, -1.82, -1.96, -1.67, -1.58, -1.49, -1.63, -1.48, -2.11, -1.62, -1.05, -1.57], # Ser-S\n",
    "        [ -2.59, -2.95, -3.75, -3.24, -3.74, -2.83, -3.07, -2.76, -1.84, -1.74, -1.88, -1.58, -1.68, -1.71, -1.68, -1.51, -2.08, -1.64, -1.21, -1.53], # Asn-N\n",
    "        [ -2.85, -3.30, -4.10, -3.67, -4.04, -3.07, -3.11, -2.97, -1.89, -1.66, -1.90, -1.49, -1.71, -1.54, -1.46, -1.42, -1.98, -1.80, -1.29, -1.73], # Gln-Q\n",
    "        [ -2.41, -2.57, -3.48, -3.17, -3.40, -2.48, -2.84, -2.76, -1.70, -1.59, -1.80, -1.63, -1.68, -1.46, -1.21, -1.02, -2.32, -2.29, -1.68, -1.33], # Asp-D\n",
    "        [ -2.27, -2.89, -3.56, -3.27, -3.59, -2.67, -2.99, -2.79, -1.51, -1.22, -1.74, -1.48, -1.51, -1.42, -1.02, -0.91, -2.15, -2.27, -1.80, -1.26], # Glu-E\n",
    "        [ -3.60, -3.98, -4.77, -4.14, -4.54, -3.58, -3.98, -3.52, -2.41, -2.15, -2.42, -2.11, -2.08, -1.98, -2.32, -2.15, -3.05, -2.16, -1.35, -2.25], # His-H\n",
    "        [ -2.57, -3.12, -3.98, -3.63, -4.03, -3.07, -3.41, -3.16, -1.83, -1.72, -1.90, -1.62, -1.64, -1.80, -2.29, -2.27, -2.16, -1.55, -0.59, -1.70], # Arg-R\n",
    "        [ -1.95, -2.48, -3.36, -3.01, -3.37, -2.49, -2.69, -2.60, -1.31, -1.15, -1.31, -1.05, -1.21, -1.29, -1.68, -1.80, -1.35, -0.59, -0.12, -0.97], # Lys-K\n",
    "        [ -3.07, -3.45, -4.25, -3.76, -4.20, -3.32, -3.73, -3.19, -2.03, -1.87, -1.90, -1.57, -1.53, -1.73, -1.33, -1.26, -2.25, -1.70, -0.97, -1.75]] # Pro-P\n",
    "imat = np.array(imat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the list of aminoacid 1 letter codes\n",
    "names = ['C','M','F','I','L','V','W','Y','A','G','T','S','N','Q','D','E','H','R','K','P']\n",
    "\n",
    "# Dictionary for translating 1 letter code to numeric index for MJ interaction matrix\n",
    "d = {names[i]:i for i in range(len(names))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_combinations(pos):\n",
    "    # This variable holds a list of all possible unique combinations of \n",
    "    # aminoacid in the chain. This is for interaction energy computations\n",
    "    \n",
    "    n = len(pos)\n",
    "    comb = np.array(np.meshgrid(range(n), range(n))).T.reshape((-1,2))\n",
    "    comb = comb[comb[:,1]-comb[:,0]>0]\n",
    "\n",
    "    return comb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def total_energy(pos, seq, comb=None):\n",
    "    '''Computes the total energy of the system.\n",
    "    \n",
    "    pos: numpy array with shape (n, 2)\n",
    "    '''\n",
    "    \n",
    "    if type(seq) == str:\n",
    "        seq = [d[a] for a in seq]\n",
    "\n",
    "    s = seq\n",
    "    \n",
    "    if comb is None:\n",
    "        comb = get_combinations(pos)\n",
    "\n",
    "    tot = 0\n",
    "    for c in comb:\n",
    "        dl1 = np.abs(pos[c[1]] - pos[c[0]]).sum()\n",
    "        if dl1 == 0:\n",
    "            # Overlap\n",
    "            tot += 1000\n",
    "        elif dl1 == 1 and c[1] - c[0] > 2:\n",
    "            # Contact\n",
    "            tot += imat[s[c[0]], s[c[1]]]\n",
    "\n",
    "    return tot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are the possible directions to choose in random walk\n",
    "# Only consider moving from the current position\n",
    "dirs = {\n",
    "    (  1,  0): np.array([(  0,  1),\n",
    "                         ( -1,  0),\n",
    "                         (  0, -1)]),\n",
    "    (  0,  1): np.array([(  1,  0),\n",
    "                         ( -1,  0),\n",
    "                         (  0, -1)]),\n",
    "    ( -1,  0): np.array([(  1,  0),\n",
    "                         (  0,  1),\n",
    "                         (  0, -1)]),\n",
    "    (  0, -1): np.array([(  1,  0),\n",
    "                         (  0,  1),\n",
    "                         ( -1,  0)]),\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_trajectory(prot_seq, sched, jobid=0):\n",
    "\n",
    "    Nit = len(sched)\n",
    "    \n",
    "    seed = dt.now().microsecond * (jobid + 1)\n",
    "    \n",
    "    # Working in parallel, better reseed\n",
    "    np.random.seed(seed)\n",
    "    \n",
    "    # The sequence translated to index\n",
    "    s = [d[a] for a in prot_seq]\n",
    "\n",
    "    # length of the sequence\n",
    "    N = len(s)\n",
    "    \n",
    "    pos = np.zeros((N, 2))\n",
    "    pos[:,0] = range(N)\n",
    "    \n",
    "    tra = np.empty((Nit, N, 2))\n",
    "    \n",
    "    comb = get_combinations(pos)\n",
    "    \n",
    "    # Random numbers for selecting residue\n",
    "    I = np.random.randint(2, N, size=Nit)\n",
    "    \n",
    "    # Random numbers for selecting walking direction\n",
    "    J = np.random.randint(3, size=Nit)\n",
    "    \n",
    "    # Third aminoacid walks only up or right. This is to avoid redundant conformations\n",
    "    J[I == 2] = 0\n",
    "    \n",
    "    # Throw a dice for proposal acceptance/rejection\n",
    "    K = np.random.uniform(size=Nit)\n",
    "    \n",
    "    # History of accepted conformations\n",
    "    H = np.empty((Nit,))\n",
    "    \n",
    "    # Energy trace\n",
    "    E = np.empty((Nit,))\n",
    "\n",
    "    # measure current energy\n",
    "    E0 = total_energy(pos, s, comb)\n",
    "    \n",
    "    # main loop\n",
    "    for it, (i, j, dice, T) in enumerate(zip(I, J, K, sched)):\n",
    "\n",
    "        # store current position\n",
    "        # we will need to restore it if walk is not successful\n",
    "        curr = pos[i:].copy()\n",
    "\n",
    "        # one step is to be taken using previous aminoacid as reference\n",
    "        back = tuple(pos[i] - pos[i-1])\n",
    "\n",
    "        # random walk\n",
    "        wdir = dirs[back][j] - back\n",
    "        \n",
    "        pos[i:] += wdir\n",
    "\n",
    "        # new energy of the system\n",
    "        E1 = total_energy(pos, s, comb)\n",
    "\n",
    "        # Delta E: change of energy will determine the probability\n",
    "        # of accepting this step\n",
    "        dE = E1 - E0\n",
    "        \n",
    "        # Simulated Annealing\n",
    "        prob = np.exp(-dE/T)\n",
    "        accept = prob > dice\n",
    "\n",
    "        if not accept:\n",
    "            pos[i:] = curr\n",
    "            H[it] = 0\n",
    "        else:\n",
    "            E0 = E1\n",
    "            H[it] = 1\n",
    "\n",
    "        E[it] = E0\n",
    "        tra[it] = pos\n",
    "\n",
    "    return tra, H, E, seed, pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_viz(pos, prot_seq, info=None, movie=False, schedule=[], energy_func=[]):\n",
    "    if movie:\n",
    "        return make_movie(pos, schedule, prot_seq, energy_func)\n",
    "    \n",
    "    if (len(pos.shape) == 3 and pos.shape[2] == 2):\n",
    "        pos = pos[-1]\n",
    "\n",
    "    qbit_model = False\n",
    "    if pos.shape[1] != 2:\n",
    "        qbit_model = True\n",
    "        q = pos[-1]\n",
    "        def dw(j):\n",
    "            return (1 - q[2*j])*(1 - q[2*j + 1])\n",
    "\n",
    "        def rg(j):\n",
    "            return (1 - q[2*j])*q[2*j + 1]\n",
    "\n",
    "        def lf(j):\n",
    "            return q[2*j]*(1 - q[2*j + 1])\n",
    "\n",
    "        def up(j):\n",
    "            return q[2*j]*q[2*j + 1]\n",
    "\n",
    "        def x(j):\n",
    "            return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "        def y(j):\n",
    "            return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "\n",
    "        pos = np.array([(x(j), y(j)) for j in range(len(prot_seq))])\n",
    "        \n",
    "    n = pos.shape[0]\n",
    "    fig = plt.figure(figsize=(10,10))\n",
    "    ax = fig.add_subplot(111, aspect=1)\n",
    "    # Major ticks every 20, minor ticks every 5\n",
    "    major_ticks = np.arange(-n, n, 10)\n",
    "    minor_ticks = np.arange(-n, n, 1)\n",
    "    ax.set_xticks(major_ticks)\n",
    "    ax.set_xticks(minor_ticks, minor=True)\n",
    "    ax.set_yticks(major_ticks)\n",
    "    ax.set_yticks(minor_ticks, minor=True)\n",
    "    ax.grid(which='both')\n",
    "    ax.grid(which='minor', alpha=0.2)\n",
    "    ax.grid(which='major', alpha=0.5)\n",
    "\n",
    "    ax.plot(*pos.T, '-bo', linewidth=5, markersize=20, alpha=0.7)\n",
    "    ax.set_xlim([-n,n])\n",
    "    ax.set_ylim([-n,n])\n",
    "\n",
    "    if info is not None:\n",
    "        ax.text(-n+1, n-1, f\"{info}\", fontsize=15)\n",
    "    \n",
    "    if prot_seq:\n",
    "        for i, (x, y) in enumerate(pos):\n",
    "            ax.text(x, y, prot_seq[i], color='white', verticalalignment='center', horizontalalignment='center', fontweight='bold')\n",
    "\n",
    "    info = ''\n",
    "    if len(schedule) > 0:\n",
    "        info = f'{info}Temperature = {schedule[-1]:.6f}'\n",
    "    if prot_seq:\n",
    "        if qbit_model:\n",
    "            system_ene = energy_func(*q)\n",
    "        else:\n",
    "            system_ene = total_energy(pos, prot_seq)\n",
    "        info = f'{info}\\nEnergy = {system_ene:.2f}'\n",
    "    ax.text(-n+1, n-1, info, fontsize=15)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_movie(traj, schedule, prot_seq, energy_func=[]):\n",
    "\n",
    "    qbit_model = False\n",
    "    if len(traj.shape) == 2:\n",
    "        qbit_model = True\n",
    "        \n",
    "        N, n, di = (len(schedule), len(prot_seq), 2)\n",
    "        \n",
    "        trajectory = np.zeros((N, n, di))\n",
    "        q = np.zeros((N, traj.shape[1]))\n",
    "        for i, qs in enumerate(traj):\n",
    "\n",
    "            def dw(j):\n",
    "                return (1 - qs[2*j])*(1 - qs[2*j + 1])\n",
    "\n",
    "            def rg(j):\n",
    "                return (1 - qs[2*j])*qs[2*j + 1]\n",
    "\n",
    "            def lf(j):\n",
    "                return qs[2*j]*(1 - qs[2*j + 1])\n",
    "\n",
    "            def up(j):\n",
    "                return qs[2*j]*qs[2*j + 1]\n",
    "\n",
    "            def x(j):\n",
    "                return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "            def y(j):\n",
    "                return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "\n",
    "            trajectory[i] = np.array([(x(j), y(j)) for j in range(len(prot_seq))])\n",
    "            q[i] = qs\n",
    "    else:\n",
    "        N, n, di = traj.shape\n",
    "        trajectory = traj\n",
    "\n",
    "    fig = plt.figure(figsize=(10,10))\n",
    "    ax = fig.add_subplot(111, aspect=1)\n",
    "    # Major ticks every 20, minor ticks every 5\n",
    "    major_ticks = np.arange(-n, n, 10)\n",
    "    minor_ticks = np.arange(-n, n, 1)\n",
    "    ax.set_xticks(major_ticks)\n",
    "    ax.set_xticks(minor_ticks, minor=True)\n",
    "    ax.set_yticks(major_ticks)\n",
    "    ax.set_yticks(minor_ticks, minor=True)\n",
    "    ax.grid(which='both')\n",
    "    ax.grid(which='minor', alpha=0.2)\n",
    "    ax.grid(which='major', alpha=0.5)\n",
    "    ax.set_xlim([-n, n])\n",
    "    ax.set_ylim([-n, n])\n",
    "\n",
    "    conformation, = ax.plot([], [], '-bo', linewidth=5, markersize=20, alpha=0.7)\n",
    "    temperature = ax.text(-n+1, n-1, '', fontsize=15, verticalalignment='top')\n",
    "\n",
    "    seq_txt = [None] * len(prot_seq)\n",
    "    if prot_seq:\n",
    "        for i, (x, y) in enumerate(trajectory[1]):\n",
    "            seq_txt[i] = ax.text(x, y, prot_seq[i], color='white', verticalalignment='center', horizontalalignment='center', fontweight='bold')\n",
    "\n",
    "    def init():\n",
    "        conformation.set_data([], [])\n",
    "        temperature.set_text('')\n",
    "        return conformation,\n",
    "\n",
    "    def animate(i):\n",
    "        pos = trajectory[i]\n",
    "        conformation.set_data(*pos.T)\n",
    "        info = ''\n",
    "        if len(schedule) > 0:\n",
    "            info = f'{info}Temperature = {schedule[i]:.6f}'\n",
    "        if prot_seq:\n",
    "            if qbit_model:\n",
    "                system_ene = energy_func(*q[i])\n",
    "            else:\n",
    "                system_ene = total_energy(pos, prot_seq)\n",
    "            info = f'{info}\\nEnergy = {system_ene:.2f}'\n",
    "        temperature.set_text(info)\n",
    "        if prot_seq:\n",
    "            for i, (x, y) in enumerate(pos):\n",
    "                seq_txt[i].set_x(x)\n",
    "                seq_txt[i].set_y(y)\n",
    "        return conformation,\n",
    "\n",
    "    # call the animator.  blit=True means only re-draw the parts that have changed.\n",
    "    anim = animation.FuncAnimation(fig, animate, init_func=init,\n",
    "                                   frames=N, interval=20, blit=True)\n",
    "    anim.save('trajectory.mp4', fps=30, extra_args=['-vcodec', 'libx264'])\n",
    "    plt.show()\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUANTUM ANNEALING:\n",
    "\n",
    "def u(i, j):\n",
    "    # eqn 22\n",
    "    # Helps to determine number of qbits for overlap\n",
    "    return np.int(((1 + j - i) % 2) * np.ceil(2*np.log2(j - i)))\n",
    "\n",
    "\n",
    "def prepare_quantum(prot_seq, return_Hs=False):\n",
    "\n",
    "    # length of the sequence\n",
    "    N = len(prot_seq)\n",
    "    \n",
    "    # The sequence translated to index\n",
    "    s = [d[a] for a in prot_seq]\n",
    "\n",
    "    # Determine number of qbits needed\n",
    "    # qbits for turns: first qbit position, number of qbits and qbits\n",
    "    ftq = 0\n",
    "    ntq = 2 * (N-1)\n",
    "    # ancilla qbits for overlap\n",
    "    foq = ftq + ntq\n",
    "    noq = sum([sum([u(i,j) for j in range(i+4, N+1)]) for i in range(N-4)])\n",
    "    # ancilla qbits for pairwise interactions\n",
    "    fiq = foq + noq\n",
    "    niq = int((N-3)*(N-2)/2)\n",
    "\n",
    "    Nqbits = ntq + noq + niq\n",
    "    \n",
    "    # Symbolic computation of Energy function\n",
    "\n",
    "    q = symbols([f'q{i:04d}' for i in range(Nqbits)])\n",
    "    q = np.array(q)\n",
    "\n",
    "    # 0 0 down\n",
    "    # 0 1 right\n",
    "    # 1 0 left\n",
    "    # 1 1 up\n",
    "\n",
    "    def dw(j):\n",
    "        nonlocal q\n",
    "        return (1 - q[2*j])*(1 - q[2*j + 1])\n",
    "\n",
    "    def rg(j):\n",
    "        nonlocal q\n",
    "        return (1 - q[2*j])*q[2*j + 1]\n",
    "\n",
    "    def lf(j):\n",
    "        nonlocal q\n",
    "        return q[2*j]*(1 - q[2*j + 1])\n",
    "\n",
    "    def up(j):\n",
    "        nonlocal q\n",
    "        return q[2*j]*q[2*j + 1]\n",
    "\n",
    "    def back(j):\n",
    "        nonlocal q\n",
    "        return rg(j)*lf(j+1) + lf(j)*rg(j+1) + up(j)*dw(j+1) + dw(j)*up(j+1)\n",
    "\n",
    "    def x(j):\n",
    "        return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "    def y(j):\n",
    "        return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "\n",
    "    def g(i, j):\n",
    "        # eqn 16\n",
    "        return (x(i) - x(j))**2 + (y(i) - y(j))**2\n",
    "\n",
    "    def c(i, j):\n",
    "        # eqn 25\n",
    "        return sum([sum([u(m, n) for n in range(m+4, N+1)]) for m in range(i+1)]) - sum([u(i, n) for n in range(j, N+1)]) + foq\n",
    "\n",
    "    def alpha(i,j):\n",
    "        uij = u(i,j)\n",
    "        cij = c(i,j)\n",
    "        return sum([q[cij+k]*2**k for k in range(uij)])\n",
    "\n",
    "    def w(i,j):\n",
    "        nonlocal q\n",
    "        return q[i*((N-3)-i+1) + int((i-1)*i/2) - (i - j) - 3 + fiq]\n",
    "\n",
    "    def J(i, j):\n",
    "        if (j-i) % 2:\n",
    "            return imat[s[i], s[j]]\n",
    "        else:\n",
    "            # only odd pairs can be in contact\n",
    "            return 0\n",
    "\n",
    "    def H_back():\n",
    "        l_back = 10\n",
    "        return sum([back(j) for j in range(N-2)]) * l_back\n",
    "\n",
    "    def H_olap():\n",
    "        # Idea, l_olap needs to big large enough so that its penalization compensates the favoring term in H_inte\n",
    "        # so it would be good it we customize each l_olap according to each Jij\n",
    "        l_olap = 10\n",
    "        return sum([sum([l_olap*((1+i-j)%2)*(2**u(i,j) - g(i,j) - alpha(i, j))**2 for j in range(i+4, N)]) for i in range(N-4)])\n",
    "\n",
    "    def H_inte():\n",
    "        # eqn 32\n",
    "        return sum([sum([w(i,j)*J(i,j)*(2-g(i,j)) for j in range(i+3, N)]) for i in range(N-3)])\n",
    "\n",
    "    # Build energy terms (symbolic expressions)\n",
    "    Hb = (H_back())\n",
    "    Ho = (H_olap()) if noq > 0 else 0\n",
    "    Hi = (H_inte())\n",
    "    \n",
    "    energy_expr = Hb + Ho + Hi\n",
    "\n",
    "    if return_Hs:\n",
    "        return prot_seq, q, energy_expr, (Hb, Ho, Hi)\n",
    "    else:\n",
    "        return prot_seq, q, energy_expr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_quantum(prot_seq, q_sym, energy_expr, sched, jobid=0):\n",
    "\n",
    "    # Callable function to compute energy\n",
    "    energy = lambdify(q_sym, energy_expr)\n",
    "\n",
    "    # length of the sequence\n",
    "    N = len(prot_seq)\n",
    "\n",
    "    # Determine number of qbits needed\n",
    "    # qbits for turns: first qbit position, number of qbits and qbits\n",
    "    ftq = 0\n",
    "    ntq = 2 * (N-1)\n",
    "    # ancilla qbits for overlap\n",
    "    foq = ftq + ntq\n",
    "    noq = sum([sum([u(i,j) for j in range(i+4, N+1)]) for i in range(N-4)])\n",
    "    # ancilla qbits for pairwise interactions\n",
    "    fiq = foq + noq\n",
    "    niq = int((N-3)*(N-2)/2)\n",
    "    \n",
    "    Nqbits = ntq + noq + niq\n",
    "    \n",
    "    assert Nqbits == len(q_sym), \"Error!!!\"\n",
    "\n",
    "    Nit = len(sched)\n",
    "    \n",
    "    seed = dt.now().microsecond * (jobid + 1)\n",
    "    \n",
    "    # Working in parallel, better reseed\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    # initialize qbits vector\n",
    "    q = [0 for i in range(Nqbits)]\n",
    "    q = np.array(q)\n",
    "\n",
    "    # Set initial positions\n",
    "    q[ftq:ftq+ntq] = [0, 1] * (N-1)\n",
    "    q[foq:foq+noq] = 1\n",
    "    q[fiq:fiq+niq] = 0\n",
    "\n",
    "    def dw(j):\n",
    "        nonlocal q\n",
    "        return (1 - q[2*j])*(1 - q[2*j + 1])\n",
    "\n",
    "    def rg(j):\n",
    "        nonlocal q\n",
    "        return (1 - q[2*j])*q[2*j + 1]\n",
    "\n",
    "    def lf(j):\n",
    "        nonlocal q\n",
    "        return q[2*j]*(1 - q[2*j + 1])\n",
    "\n",
    "    def up(j):\n",
    "        nonlocal q\n",
    "        return q[2*j]*q[2*j + 1]\n",
    "\n",
    "    def x(j):\n",
    "        nonlocal q\n",
    "        return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "    def y(j):\n",
    "        nonlocal q\n",
    "        return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "    \n",
    "    def pos():\n",
    "        # translates q vector to position coordinates\n",
    "        # useful for visualization\n",
    "        return np.array([(x(j), y(j)) for j in range(len(prot_seq))])\n",
    "\n",
    "    tra = np.empty((Nit, Nqbits))\n",
    "\n",
    "    # Random numbers for selecting qbit\n",
    "    Q = np.random.randint(3, len(q), size=Nit)\n",
    "\n",
    "    # Throw a dice for proposal acceptance/rejection\n",
    "    K = np.random.uniform(size=Nit)\n",
    "\n",
    "    # History of accepted conformations\n",
    "    H = np.empty((Nit,))\n",
    "    \n",
    "    # Energy trace\n",
    "    E = np.empty((Nit,))\n",
    "\n",
    "    # measure current energy\n",
    "    E0 = energy(*q)\n",
    "\n",
    "    # main loop\n",
    "    for it, (i, dice, T) in enumerate(zip(Q, K, sched)):\n",
    "#     for it, (dice, T) in enumerate(zip(K, sched)):\n",
    "#         i = (it % (Nqbits-3)) + 3\n",
    "\n",
    "        # flip selected qbit\n",
    "        q[i] = 0 if q[i] else 1\n",
    "\n",
    "        # new energy of the system\n",
    "        E1 = energy(*q)\n",
    "\n",
    "        # Delta E: change of energy will determine the probability\n",
    "        # of accepting this step\n",
    "        dE = E1 - E0\n",
    "\n",
    "        # Simulated Annealing\n",
    "        prob = np.exp(-dE/T)\n",
    "        accept = prob > dice\n",
    "\n",
    "        if not accept:\n",
    "            # flip back\n",
    "            q[i] = 0 if q[i] else 1\n",
    "            H[it] = 0\n",
    "        else:\n",
    "            E0 = E1\n",
    "            H[it] = 1\n",
    "\n",
    "        E[it] = E0\n",
    "        tra[it] = q\n",
    "\n",
    "    return tra, H, E, seed, q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_video():\n",
    "    video = open('trajectory.mp4', 'rb').read()\n",
    "    encoded = base64.b64encode(video)\n",
    "    return HTML(data='''<video alt=\"test\" controls>\n",
    "                           <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n",
    "                        </video>'''.format(encoded.decode('ascii')))\n",
    "\n",
    "\n",
    "def viz_short_smpl(smpl, prot_seq, q, energy_func):\n",
    "    qstr_short = [smpl[k] if k in smpl.keys() else 0 for k in q[3:]]\n",
    "    qstr = np.array([[0, 1, 0] + qstr_short])\n",
    "    make_viz(qstr, prot_seq, movie=False, energy_func=energy_func)\n",
    "\n",
    "\n",
    "def preprocess_expr(H, q):\n",
    "    # Helper function to clean resulting expressions\n",
    "    # some zero coefficients fail to evaluate to 0, rounding is necessary\n",
    "    # for all qbits, qi**n = qi. bc qi in [0,1]\n",
    "    \n",
    "    H = expand(H).evalf()\n",
    "    tmp = H\n",
    "    for a in preorder_traversal(tmp):\n",
    "        if isinstance(a, Float):\n",
    "            H = H.subs(a, round(a, 8))\n",
    "    degr = Poly(H).degree()\n",
    "    for qi in q:\n",
    "        for n in reversed(range(2, degr + 1)):\n",
    "            H = H.subs(qi**n, qi)\n",
    "    return H"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUANTUM ANNEALING ON D'WAVE HARDWARE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The sequence of protein to fold\n",
    "# prot_seq = \"YYDPETGTWY\"\n",
    "prot_seq = \"YYDPET\"\n",
    "prot_seq, q, energy_expr, ene_terms_expr = prepare_quantum(prot_seq, return_Hs=True)\n",
    "energy_func = lambdify(q, energy_expr)\n",
    "sched = np.power(2, np.linspace(4, -1, 300))\n",
    "max(sched), min(sched), len(sched)\n",
    "plt.plot(sched)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.exp(-10/sched))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_cores = 12\n",
    "\n",
    "res = Parallel(n_jobs=num_cores)(delayed(simulate_quantum)(prot_seq, q, energy_expr, sched, jobid) for jobid in range(720))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tra, H, E, seeds, results = zip(*res)\n",
    "tra = np.array(tra)\n",
    "history = np.array(H)\n",
    "energy = np.array(E)\n",
    "results = np.array(results)\n",
    "acp = history.cumsum(axis=1)\n",
    "\n",
    "plt.plot(acp.mean(axis=0))\n",
    "plt.fill_between(\n",
    "    range(acp.shape[1]),\n",
    "    acp.mean(axis=0) - acp.std(axis=0),\n",
    "    acp.mean(axis=0) + acp.std(axis=0), alpha=0.2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "enes = np.array([energy_func(*qs) for qs in results])\n",
    "best = np.argmin(enes)\n",
    "plt.hist(enes)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "180\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "correct = results[enes.round(4) == -6.20]\n",
    "make_viz(tra[best], prot_seq, schedule=sched, movie=False, energy_func=energy_func)\n",
    "if len(correct) > 0:\n",
    "    make_viz(correct[[0]], prot_seq, schedule=sched, movie=False, energy_func=energy_func)\n",
    "\n",
    "all_best =enes == min(enes)\n",
    "(all_best).sum()\n",
    "\n",
    "all_correct = enes.round(2) == -6.20\n",
    "(all_correct).sum()\n",
    "plt.plot(np.sort(enes))\n",
    "plt.show()\n",
    "rnd_best = np.random.choice(np.argwhere(all_best).reshape((-1,)))\n",
    "print(rnd_best)\n",
    "plt.plot(energy[rnd_best])\n",
    "plt.ylim(min(enes)-5, 200)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dwave.system.samplers import DWaveSampler\n",
    "from dwave.system.composites import EmbeddingComposite, FixedEmbeddingComposite\n",
    "import dwave_networkx as dnx\n",
    "from minorminer import find_embedding\n",
    "import dimod\n",
    "from sympy.parsing.sympy_parser import parse_expr\n",
    "\n",
    "import json\n",
    "import numpy as np\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "SolverNotFoundError",
     "evalue": "No solver with name='DW_2000Q_5' available",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mSolverNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-067ed198f554>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Define the solver and get its correspondiing adjacency graph for embedding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# other sampler parameters are in dwave config file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msolver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDWaveSampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"DW_2000Q_5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0msolver_G\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGraph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0medgelist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Maximum anneal schedule points: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"max_anneal_schedule_points\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/dwave/system/samplers/dwave_sampler.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, failover, retry_interval, **config)\u001b[0m\n\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mClient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_config\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 165\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_solver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfailover\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfailover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/dwave/cloud/client.py\u001b[0m in \u001b[0;36mget_solver\u001b[0;34m(self, name, refresh, **filters)\u001b[0m\n\u001b[1;32m   1077\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1078\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Fetching solvers according to filters=%r\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1079\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_solvers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfilters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1080\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mSolverNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Solver with the requested features not available\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/dwave/cloud/client.py\u001b[0m in \u001b[0;36mget_solvers\u001b[0;34m(self, refresh, order_by, **filters)\u001b[0m\n\u001b[1;32m    990\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    991\u001b[0m         \u001b[0;31m# filter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 992\u001b[0;31m         \u001b[0msolvers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetch_solvers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    993\u001b[0m         \u001b[0msolvers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msolvers\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpredicates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    994\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/dwave/cloud/utils.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    404\u001b[0m                 \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'val'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    405\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 406\u001b[0;31m                 \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    407\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpires\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaxage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/dwave/cloud/client.py\u001b[0m in \u001b[0;36m_fetch_solvers\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m404\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 627\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mSolverNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No solver with name={!r} available\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    628\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    629\u001b[0m         \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mSolverNotFoundError\u001b[0m: No solver with name='DW_2000Q_5' available"
     ]
    }
   ],
   "source": [
    "# Define the solver and get its correspondiing adjacency graph for embedding\n",
    "# other sampler parameters are in dwave config file\n",
    "solver = DWaveSampler(solver=\"DW_2000Q_5\")\n",
    "solver_G = nx.Graph(solver.edgelist)\n",
    "print(\"Maximum anneal schedule points: {}\".format(solver.properties[\"max_anneal_schedule_points\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'solver' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-0ad9c87db2c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mannealing_range\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"annealing_time_range\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmax_slope\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mannealing_range\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Annealing time range: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"annealing_time_range\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Maximum slope:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_slope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'solver' is not defined"
     ]
    }
   ],
   "source": [
    "annealing_range = solver.properties[\"annealing_time_range\"]\n",
    "max_slope = 1.0/annealing_range[0]\n",
    "print(\"Annealing time range: {}\".format(solver.properties[\"annealing_time_range\"]))\n",
    "print(\"Maximum slope:\", max_slope)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fix first 3 qbits to avoid redundant conformations\n",
    "# for multiple problems in same graph\n",
    "energy_expr_less_00 = preprocess_expr(energy_expr.subs({'q0000':0, 'q0001':1, 'q0002':0}), q)\n",
    "energy_expr_less_00_func = lambdify(q[3:], energy_expr_less_00)\n",
    "energy_expr_ot_00 = energy_expr_less_00.as_ordered_terms()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "hubo_00 = {}\n",
    "for coeff, qqss in [term.as_coeff_mul() for term in energy_expr_ot_00]:\n",
    "    try:\n",
    "        hubo_00[qqss[1:]] = float(qqss[0]*coeff)\n",
    "    except TypeError:\n",
    "        hubo_00[qqss] = float(coeff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "poly_00 = dimod.BinaryPolynomial(hubo_00, dimod.BINARY)\n",
    "poly_00.normalize()\n",
    "mk_quaq_strength = 1.05\n",
    "\n",
    "bqm_00 = dimod.make_quadratic(poly_00, mk_quaq_strength, dimod.BINARY)\n",
    "bqm_00.normalize()\n",
    "\n",
    "bqm_spin_00 = bqm_00.change_vartype(dimod.SPIN, inplace=False)\n",
    "bqm_spin_00.normalize()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
