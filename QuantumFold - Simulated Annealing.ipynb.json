{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from joblib import Parallel, delayed\n",
    "from sympy import *\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from datetime import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import animation\n",
    "import base64\n",
    "from IPython.display import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#         Cys-C, Met-M, Phe-F, Ile-I, Leu-L, Val-V, Trp-W, Tyr-Y, Ala-A, Gly-G, Thr-T, Ser-S, Asn-N, Gln-Q, Asp-D, Glu-E, His-H, Arg-R, Lys-K, Pro-P\n",
    "imat = [[ -5.44, -4.99, -5.80, -5.50, -5.83, -4.96, -4.95, -4.16, -3.57, -3.16, -3.11, -2.86, -2.59, -2.85, -2.41, -2.27, -3.60, -2.57, -1.95, -3.07], # Cys-C\n",
    "        [ -4.99, -5.46, -6.56, -6.02, -6.41, -5.32, -5.55, -4.91, -3.94, -3.39, -3.51, -3.03, -2.95, -3.30, -2.57, -2.89, -3.98, -3.12, -2.48, -3.45], # Met-M\n",
    "        [ -5.80, -6.56, -7.26, -6.84, -7.28, -6.29, -6.16, -5.66, -4.81, -4.13, -4.28, -4.02, -3.75, -4.10, -3.48, -3.56, -4.77, -3.98, -3.36, -4.25], # Phe-F\n",
    "        [ -5.50, -6.02, -6.84, -6.54, -7.04, -6.05, -5.78, -5.25, -4.58, -3.78, -4.03, -3.52, -3.24, -3.67, -3.17, -3.27, -4.14, -3.63, -3.01, -3.76], # Ile-I\n",
    "        [ -5.83, -6.41, -7.28, -7.04, -7.37, -6.48, -6.14, -5.67, -4.91, -4.16, -4.34, -3.92, -3.74, -4.04, -3.40, -3.59, -4.54, -4.03, -3.37, -4.20], # Leu-L\n",
    "        [ -4.96, -5.32, -6.29, -6.05, -6.48, -5.52, -5.18, -4.62, -4.04, -3.38, -3.46, -3.05, -2.83, -3.07, -2.48, -2.67, -3.58, -3.07, -2.49, -3.32], # Val-V\n",
    "        [ -4.95, -5.55, -6.16, -5.78, -6.14, -5.18, -5.06, -4.66, -3.82, -3.42, -3.22, -2.99, -3.07, -3.11, -2.84, -2.99, -3.98, -3.41, -2.69, -3.73], # Trp-W\n",
    "        [ -4.16, -4.91, -5.66, -5.25, -5.67, -4.62, -4.66, -4.17, -3.36, -3.01, -3.01, -2.78, -2.76, -2.97, -2.76, -2.79, -3.52, -3.16, -2.60, -3.19], # Tyr-Y\n",
    "        [ -3.57, -3.94, -4.81, -4.58, -4.91, -4.04, -3.82, -3.36, -2.72, -2.31, -2.32, -2.01, -1.84, -1.89, -1.70, -1.51, -2.41, -1.83, -1.31, -2.03], # Ala-A\n",
    "        [ -3.16, -3.39, -4.13, -3.78, -4.16, -3.38, -3.42, -3.01, -2.31, -2.24, -2.08, -1.82, -1.74, -1.66, -1.59, -1.22, -2.15, -1.72, -1.15, -1.87], # Gly-G\n",
    "        [ -3.11, -3.51, -4.28, -4.03, -4.34, -3.46, -3.22, -3.01, -2.32, -2.08, -2.12, -1.96, -1.88, -1.90, -1.80, -1.74, -2.42, -1.90, -1.31, -1.90], # Thr-T\n",
    "        [ -2.86, -3.03, -4.02, -3.52, -3.92, -3.05, -2.99, -2.78, -2.01, -1.82, -1.96, -1.67, -1.58, -1.49, -1.63, -1.48, -2.11, -1.62, -1.05, -1.57], # Ser-S\n",
    "        [ -2.59, -2.95, -3.75, -3.24, -3.74, -2.83, -3.07, -2.76, -1.84, -1.74, -1.88, -1.58, -1.68, -1.71, -1.68, -1.51, -2.08, -1.64, -1.21, -1.53], # Asn-N\n",
    "        [ -2.85, -3.30, -4.10, -3.67, -4.04, -3.07, -3.11, -2.97, -1.89, -1.66, -1.90, -1.49, -1.71, -1.54, -1.46, -1.42, -1.98, -1.80, -1.29, -1.73], # Gln-Q\n",
    "        [ -2.41, -2.57, -3.48, -3.17, -3.40, -2.48, -2.84, -2.76, -1.70, -1.59, -1.80, -1.63, -1.68, -1.46, -1.21, -1.02, -2.32, -2.29, -1.68, -1.33], # Asp-D\n",
    "        [ -2.27, -2.89, -3.56, -3.27, -3.59, -2.67, -2.99, -2.79, -1.51, -1.22, -1.74, -1.48, -1.51, -1.42, -1.02, -0.91, -2.15, -2.27, -1.80, -1.26], # Glu-E\n",
    "        [ -3.60, -3.98, -4.77, -4.14, -4.54, -3.58, -3.98, -3.52, -2.41, -2.15, -2.42, -2.11, -2.08, -1.98, -2.32, -2.15, -3.05, -2.16, -1.35, -2.25], # His-H\n",
    "        [ -2.57, -3.12, -3.98, -3.63, -4.03, -3.07, -3.41, -3.16, -1.83, -1.72, -1.90, -1.62, -1.64, -1.80, -2.29, -2.27, -2.16, -1.55, -0.59, -1.70], # Arg-R\n",
    "        [ -1.95, -2.48, -3.36, -3.01, -3.37, -2.49, -2.69, -2.60, -1.31, -1.15, -1.31, -1.05, -1.21, -1.29, -1.68, -1.80, -1.35, -0.59, -0.12, -0.97], # Lys-K\n",
    "        [ -3.07, -3.45, -4.25, -3.76, -4.20, -3.32, -3.73, -3.19, -2.03, -1.87, -1.90, -1.57, -1.53, -1.73, -1.33, -1.26, -2.25, -1.70, -0.97, -1.75]] # Pro-P\n",
    "imat = np.array(imat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the list of aminoacid 1 letter codes\n",
    "names = ['C','M','F','I','L','V','W','Y','A','G','T','S','N','Q','D','E','H','R','K','P']\n",
    "\n",
    "# Dictionary for translating 1 letter code to numeric index for MJ interaction matrix\n",
    "d = {names[i]:i for i in range(len(names))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_combinations(pos):\n",
    "    # This variable holds a list of all possible unique combinations of \n",
    "    # aminoacid in the chain. This is for interaction energy computations\n",
    "    \n",
    "    n = len(pos)\n",
    "    comb = np.array(np.meshgrid(range(n), range(n))).T.reshape((-1,2))\n",
    "    comb = comb[comb[:,1]-comb[:,0]>0]\n",
    "\n",
    "    return comb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def total_energy(pos, seq, comb=None):\n",
    "    '''Computes the total energy of the system.\n",
    "    \n",
    "    pos: numpy array with shape (n, 2)\n",
    "    '''\n",
    "    \n",
    "    if type(seq) == str:\n",
    "        seq = [d[a] for a in seq]\n",
    "\n",
    "    s = seq\n",
    "    \n",
    "    if comb is None:\n",
    "        comb = get_combinations(pos)\n",
    "\n",
    "    tot = 0\n",
    "    for c in comb:\n",
    "        dl1 = np.abs(pos[c[1]] - pos[c[0]]).sum()\n",
    "        if dl1 == 0:\n",
    "            # Overlap\n",
    "            tot += 1000\n",
    "        elif dl1 == 1 and c[1] - c[0] > 2:\n",
    "            # Contact\n",
    "            tot += imat[s[c[0]], s[c[1]]]\n",
    "\n",
    "    return tot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are the possible directions to choose in random walk\n",
    "# Only consider moving from the current position\n",
    "dirs = {\n",
    "    (  1,  0): np.array([(  0,  1),\n",
    "                         ( -1,  0),\n",
    "                         (  0, -1)]),\n",
    "    (  0,  1): np.array([(  1,  0),\n",
    "                         ( -1,  0),\n",
    "                         (  0, -1)]),\n",
    "    ( -1,  0): np.array([(  1,  0),\n",
    "                         (  0,  1),\n",
    "                         (  0, -1)]),\n",
    "    (  0, -1): np.array([(  1,  0),\n",
    "                         (  0,  1),\n",
    "                         ( -1,  0)]),\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_trajectory(prot_seq, sched, jobid=0):\n",
    "\n",
    "    Nit = len(sched)\n",
    "    \n",
    "    seed = dt.now().microsecond * (jobid + 1)\n",
    "    \n",
    "    # Working in parallel, better reseed\n",
    "    np.random.seed(seed)\n",
    "    \n",
    "    # The sequence translated to index\n",
    "    s = [d[a] for a in prot_seq]\n",
    "\n",
    "    # length of the sequence\n",
    "    N = len(s)\n",
    "    \n",
    "    pos = np.zeros((N, 2))\n",
    "    pos[:,0] = range(N)\n",
    "    \n",
    "    tra = np.empty((Nit, N, 2))\n",
    "    \n",
    "    comb = get_combinations(pos)\n",
    "    \n",
    "    # Random numbers for selecting residue\n",
    "    I = np.random.randint(2, N, size=Nit)\n",
    "    \n",
    "    # Random numbers for selecting walking direction\n",
    "    J = np.random.randint(3, size=Nit)\n",
    "    \n",
    "    # Third aminoacid walks only up or right. This is to avoid redundant conformations\n",
    "    J[I == 2] = 0\n",
    "    \n",
    "    # Throw a dice for proposal acceptance/rejection\n",
    "    K = np.random.uniform(size=Nit)\n",
    "    \n",
    "    # History of accepted conformations\n",
    "    H = np.empty((Nit,))\n",
    "    \n",
    "    # Energy trace\n",
    "    E = np.empty((Nit,))\n",
    "\n",
    "    # measure current energy\n",
    "    E0 = total_energy(pos, s, comb)\n",
    "    \n",
    "    # main loop\n",
    "    for it, (i, j, dice, T) in enumerate(zip(I, J, K, sched)):\n",
    "\n",
    "        # store current position\n",
    "        # we will need to restore it if walk is not successful\n",
    "        curr = pos[i:].copy()\n",
    "\n",
    "        # one step is to be taken using previous aminoacid as reference\n",
    "        back = tuple(pos[i] - pos[i-1])\n",
    "\n",
    "        # random walk\n",
    "        wdir = dirs[back][j] - back\n",
    "        \n",
    "        pos[i:] += wdir\n",
    "\n",
    "        # new energy of the system\n",
    "        E1 = total_energy(pos, s, comb)\n",
    "\n",
    "        # Delta E: change of energy will determine the probability\n",
    "        # of accepting this step\n",
    "        dE = E1 - E0\n",
    "        \n",
    "        # Simulated Annealing\n",
    "        prob = np.exp(-dE/T)\n",
    "        accept = prob > dice\n",
    "\n",
    "        if not accept:\n",
    "            pos[i:] = curr\n",
    "            H[it] = 0\n",
    "        else:\n",
    "            E0 = E1\n",
    "            H[it] = 1\n",
    "\n",
    "        E[it] = E0\n",
    "        tra[it] = pos\n",
    "\n",
    "    return tra, H, E, seed, pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_viz(pos, prot_seq, info=None, movie=False, schedule=[], energy_func=[]):\n",
    "    if movie:\n",
    "        return make_movie(pos, schedule, prot_seq, energy_func)\n",
    "    \n",
    "    if (len(pos.shape) == 3 and pos.shape[2] == 2):\n",
    "        pos = pos[-1]\n",
    "\n",
    "    qbit_model = False\n",
    "    if pos.shape[1] != 2:\n",
    "        qbit_model = True\n",
    "        q = pos[-1]\n",
    "        def dw(j):\n",
    "            return (1 - q[2*j])*(1 - q[2*j + 1])\n",
    "\n",
    "        def rg(j):\n",
    "            return (1 - q[2*j])*q[2*j + 1]\n",
    "\n",
    "        def lf(j):\n",
    "            return q[2*j]*(1 - q[2*j + 1])\n",
    "\n",
    "        def up(j):\n",
    "            return q[2*j]*q[2*j + 1]\n",
    "\n",
    "        def x(j):\n",
    "            return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "        def y(j):\n",
    "            return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "\n",
    "        pos = np.array([(x(j), y(j)) for j in range(len(prot_seq))])\n",
    "        \n",
    "    n = pos.shape[0]\n",
    "    fig = plt.figure(figsize=(10,10))\n",
    "    ax = fig.add_subplot(111, aspect=1)\n",
    "    # Major ticks every 20, minor ticks every 5\n",
    "    major_ticks = np.arange(-n, n, 10)\n",
    "    minor_ticks = np.arange(-n, n, 1)\n",
    "    ax.set_xticks(major_ticks)\n",
    "    ax.set_xticks(minor_ticks, minor=True)\n",
    "    ax.set_yticks(major_ticks)\n",
    "    ax.set_yticks(minor_ticks, minor=True)\n",
    "    ax.grid(which='both')\n",
    "    ax.grid(which='minor', alpha=0.2)\n",
    "    ax.grid(which='major', alpha=0.5)\n",
    "\n",
    "    ax.plot(*pos.T, '-bo', linewidth=5, markersize=20, alpha=0.7)\n",
    "    ax.set_xlim([-n,n])\n",
    "    ax.set_ylim([-n,n])\n",
    "\n",
    "    if info is not None:\n",
    "        ax.text(-n+1, n-1, f\"{info}\", fontsize=15)\n",
    "    \n",
    "    if prot_seq:\n",
    "        for i, (x, y) in enumerate(pos):\n",
    "            ax.text(x, y, prot_seq[i], color='white', verticalalignment='center', horizontalalignment='center', fontweight='bold')\n",
    "\n",
    "    info = ''\n",
    "    if len(schedule) > 0:\n",
    "        info = f'{info}Temperature = {schedule[-1]:.6f}'\n",
    "    if prot_seq:\n",
    "        if qbit_model:\n",
    "            system_ene = energy_func(*q)\n",
    "        else:\n",
    "            system_ene = total_energy(pos, prot_seq)\n",
    "        info = f'{info}\\nEnergy = {system_ene:.2f}'\n",
    "    ax.text(-n+1, n-1, info, fontsize=15)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_movie(traj, schedule, prot_seq, energy_func=[]):\n",
    "\n",
    "    qbit_model = False\n",
    "    if len(traj.shape) == 2:\n",
    "        qbit_model = True\n",
    "        \n",
    "        N, n, di = (len(schedule), len(prot_seq), 2)\n",
    "        \n",
    "        trajectory = np.zeros((N, n, di))\n",
    "        q = np.zeros((N, traj.shape[1]))\n",
    "        for i, qs in enumerate(traj):\n",
    "\n",
    "            def dw(j):\n",
    "                return (1 - qs[2*j])*(1 - qs[2*j + 1])\n",
    "\n",
    "            def rg(j):\n",
    "                return (1 - qs[2*j])*qs[2*j + 1]\n",
    "\n",
    "            def lf(j):\n",
    "                return qs[2*j]*(1 - qs[2*j + 1])\n",
    "\n",
    "            def up(j):\n",
    "                return qs[2*j]*qs[2*j + 1]\n",
    "\n",
    "            def x(j):\n",
    "                return sum([(rg(k) - lf(k)) for k in range(j)])\n",
    "\n",
    "            def y(j):\n",
    "                return sum([(up(k) - dw(k)) for k in range(j)])\n",
    "\n",
    "            trajectory[i] = np.array([(x(j), y(j)) for j in range(len(prot_seq))])\n",
    "            q[i] = qs\n",
    "    else:\n",
    "        N, n, di = traj.shape\n",
    "        trajectory = traj\n",
    "\n",
    "    fig = plt.figure(figsize=(10,10))\n",
    "    ax = fig.add_subplot(111, aspect=1)\n",
    "    # Major ticks every 20, minor ticks every 5\n",
    "    major_ticks = np.arange(-n, n, 10)\n",
    "    minor_ticks = np.arange(-n, n, 1)\n",
    "    ax.set_xticks(major_ticks)\n",
    "    ax.set_xticks(minor_ticks, minor=True)\n",
    "    ax.set_yticks(major_ticks)\n",
    "    ax.set_yticks(minor_ticks, minor=True)\n",
    "    ax.grid(which='both')\n",
    "    ax.grid(which='minor', alpha=0.2)\n",
    "    ax.grid(which='major', alpha=0.5)\n",
    "    ax.set_xlim([-n, n])\n",
    "    ax.set_ylim([-n, n])\n",
    "\n",
    "    conformation, = ax.plot([], [], '-bo', linewidth=5, markersize=20, alpha=0.7)\n",
    "    temperature = ax.text(-n+1, n-1, '', fontsize=15, verticalalignment='top')\n",
    "\n",
    "    seq_txt = [None] * len(prot_seq)\n",
    "    if prot_seq:\n",
    "        for i, (x, y) in enumerate(trajectory[1]):\n",
    "            seq_txt[i] = ax.text(x, y, prot_seq[i], color='white', verticalalignment='center', horizontalalignment='center', fontweight='bold')\n",
    "\n",
    "    def init():\n",
    "        conformation.set_data([], [])\n",
    "        temperature.set_text('')\n",
    "        return conformation,\n",
    "\n",
    "    def animate(i):\n",
    "        pos = trajectory[i]\n",
    "        conformation.set_data(*pos.T)\n",
    "        info = ''\n",
    "        if len(schedule) > 0:\n",
    "            info = f'{info}Temperature = {schedule[i]:.6f}'\n",
    "        if prot_seq:\n",
    "            if qbit_model:\n",
    "                system_ene = energy_func(*q[i])\n",
    "            else:\n",
    "                system_ene = total_energy(pos, prot_seq)\n",
    "            info = f'{info}\\nEnergy = {system_ene:.2f}'\n",
    "        temperature.set_text(info)\n",
    "        if prot_seq:\n",
    "            for i, (x, y) in enumerate(pos):\n",
    "                seq_txt[i].set_x(x)\n",
    "                seq_txt[i].set_y(y)\n",
    "        return conformation,\n",
    "\n",
    "    # call the animator.  blit=True means only re-draw the parts that have changed.\n",
    "    anim = animation.FuncAnimation(fig, animate, init_func=init,\n",
    "                                   frames=N, interval=20, blit=True)\n",
    "    anim.save('trajectory.mp4', fps=30, extra_args=['-vcodec', 'libx264'])\n",
    "    plt.show()\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#SIMULATED ANNEALING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The sequence of protein to fold\n",
    "# prot_seq = \"YYDPETGTWY\"\n",
    "prot_seq = \"YYDPET\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32.0, 1.0)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sched = np.power(2, np.linspace(5,0, 30*10))\n",
    "max(sched), min(sched)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sched)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.exp(-10/sched))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from joblib import Parallel, delayed\n",
    "import multiprocessing\n",
    "\n",
    "num_cores = 6\n",
    "\n",
    "res = Parallel(n_jobs=num_cores)(delayed(simulate_trajectory)(prot_seq, sched, jobid) for jobid in range(360))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tra, H, E, seeds, results = zip(*res)\n",
    "tra = np.array(tra)\n",
    "history = np.array(H)\n",
    "energy = np.array(E)\n",
    "acp = history.cumsum(axis=1)\n",
    "plt.plot(acp.mean(axis=0))\n",
    "plt.fill_between(\n",
    "    range(acp.shape[1]),\n",
    "    acp.mean(axis=0) - acp.std(axis=0),\n",
    "    acp.mean(axis=0) + acp.std(axis=0), alpha=0.2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "MovieWriter ffmpeg unavailable; trying to use <class 'matplotlib.animation.PillowWriter'> instead.\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "unknown file extension: .mp4",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2063\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2064\u001b[0;31m                 \u001b[0mformat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEXTENSION\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mext\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2065\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: '.mp4'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-4c04a20e5847>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0menes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtotal_energy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprot_seq\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mpos\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mbest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmake_viz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtra\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprot_seq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschedule\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msched\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmovie\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mall_best\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mall_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-11-f45ce324af30>\u001b[0m in \u001b[0;36mmake_viz\u001b[0;34m(pos, prot_seq, info, movie, schedule, energy_func)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmake_viz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprot_seq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmovie\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschedule\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menergy_func\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmovie\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmake_movie\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschedule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprot_seq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menergy_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mpos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-12-50fe448dded0>\u001b[0m in \u001b[0;36mmake_movie\u001b[0;34m(traj, schedule, prot_seq, energy_func)\u001b[0m\n\u001b[1;32m     85\u001b[0m     anim = animation.FuncAnimation(fig, animate, init_func=init,\n\u001b[1;32m     86\u001b[0m                                    frames=N, interval=20, blit=True)\n\u001b[0;32m---> 87\u001b[0;31m     \u001b[0manim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'trajectory.mp4'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra_args\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'-vcodec'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'libx264'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs, progress_callback)\u001b[0m\n\u001b[1;32m   1154\u001b[0m                             \u001b[0mprogress_callback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe_number\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_frames\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m                             \u001b[0mframe_number\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1156\u001b[0;31m                     \u001b[0mwriter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrab_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0msavefig_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m         \u001b[0;31m# Reconnect signal for first draw if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 119\u001b[0;31m                 \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    120\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36msaving\u001b[0;34m(self, fig, outfile, dpi, *args, **kwargs)\u001b[0m\n\u001b[1;32m    230\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/matplotlib/animation.py\u001b[0m in \u001b[0;36mfinish\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    575\u001b[0m         self._frames[0].save(\n\u001b[1;32m    576\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_outfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msave_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mappend_images\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_frames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 577\u001b[0;31m             duration=int(1000 / self.fps), loop=0)\n\u001b[0m\u001b[1;32m    578\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2064\u001b[0m                 \u001b[0mformat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEXTENSION\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mext\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2065\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2066\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"unknown file extension: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2067\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mSAVE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: unknown file extension: .mp4"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "enes = [total_energy(pos, prot_seq) for pos in results]\n",
    "best = np.argmin(enes)\n",
    "make_viz(tra[best], prot_seq, schedule=sched, movie=True)\n",
    "all_best = np.array(enes) == min(enes)\n",
    "(all_best).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.sort(enes))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'all_best' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-078eea4460c1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrnd_best\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrnd_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menergy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrnd_best\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mshow_video\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'all_best' is not defined"
     ]
    }
   ],
   "source": [
    "rnd_best = np.random.choice(np.argwhere(all_best).reshape((-1,)))\n",
    "print(rnd_best)\n",
    "plt.plot(energy[rnd_best])\n",
    "plt.show()\n",
    "show_video()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
